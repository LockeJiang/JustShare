/**   
 * Copyright (c) 2013 by Logan.	
 *   
 * 爱分享-微博客户端，是一款运行在android手机上的开源应用，代码和文档已托管在GitHub上，欢迎爱好者加入
 * 1.授权认证：Oauth2.0认证流程
 * 2.服务器访问操作流程
 * 3.新浪微博SDK和腾讯微博SDK
 * 4.HMAC加密算法
 * 5.SQLite数据库相关操作
 * 6.字符串处理，表情识别
 * 7.JSON解析，XML解析：超链接解析，时间解析等
 * 8.Android UI：样式文件，布局
 * 9.异步加载图片，异步处理数据，多线程  
 * 10.第三方开源框架和插件
 *    
 */
package com.logan.weibo.adapter;

import java.util.Date;
import java.util.List;

import android.content.Context;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.logan.R;
import com.logan.util.AsyncImageLoader;
import com.logan.util.BitmapManager;
import com.logan.util.QAsyncImageLoader;
import com.logan.util.QAsyncImageLoader.ImageCallback;
import com.logan.util.TimeUtil;
import com.logan.util.UIHelper;
import com.logan.weibo.bean.Status;
import com.logan.weibo.bean.User;
/**
 * 新浪微博列表适配器
 * @author Logan <a href="https://github.com/Logan676/JustSharePro"/>
 *   
 * @version 1.0 
 *  
 */
public class ListViewAdapter extends BaseAdapter {

	
	private final String TAG = "ListViewAdapter";
	private Context context;
	private AsyncImageLoader mImageLoader = new AsyncImageLoader();
	private QAsyncImageLoader imageLoader = new QAsyncImageLoader();
	private BitmapManager bmpManager;
	private List<Status> mData;
	private LayoutInflater mInflater;
	
	ViewHolder holder;

	public ListViewAdapter(Context context, List<Status> status) {
		super();
		this.context = context;
		mData = status;
		this.bmpManager = new BitmapManager(BitmapFactory.decodeResource(context.getResources(), R.drawable.loading));
		mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	}

	@Override
	public int getCount() {
		
		return this.mData != null ? this.mData.size() : 0;
	}

	@Override
	public Object getItem(int position) {
		
		return this.mData.get(position);
	}

	@Override
	public long getItemId(int position) {
		
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		Status mStatus = mData.get(position);
		User user = mStatus.getUser();
		Status retweetedStatus = null;
		if (mStatus.getRetweetedStatus() != null) {
			retweetedStatus = mStatus.getRetweetedStatus();
		}
		String profile_image_url = user.getProfileImageUrl();
		String name = user.getName();
		String text = mStatus.getText();
		String microBlogImage = mStatus.getThumbnailPic();
		String source = mStatus.getSource().getName();
		Boolean verified = user.isVerified();
		int statuses_count = mStatus.getCommentsCount();
		int followers_count = mStatus.getRepostsCount();
		String created_at = TimeUtil.converTime(new Date(mStatus.getCreatedAt()).getTime() / 1000);
		//Log.v(TAG, "profile_image_url:  " + profile_image_url);
		//Log.v(TAG, "name:  " + name);
		//Log.v(TAG, "text:  " + text);
		//Log.v(TAG, "microBlogImage:  " + microBlogImage);
		//Log.v(TAG, "source:  " + source);
		//Log.v(TAG, "verified:  " + verified);
		//Log.v(TAG, "statuses_count:  " + statuses_count);
		//Log.v(TAG, "followers_count:  " + followers_count);
		//Log.v(TAG, "created_at:  " + created_at);

		if (convertView == null) {
			holder = new ViewHolder();
			convertView = mInflater.inflate(R.layout.weibo_listview_item, null);
			holder.name = (TextView) convertView.findViewById(R.id.item_screen_name);
			holder.profile_image = (ImageView) convertView.findViewById(R.id.item_profile_image);holder.text = (TextView) convertView.findViewById(R.id.item_text);
			holder.microBlogImage = (ImageView) convertView.findViewById(R.id.item_microBlogImage);
			holder.source = (TextView) convertView.findViewById(R.id.item_from);
			holder.statuses_count = (TextView) convertView.findViewById(R.id.item_tweet_statuses_count);
			holder.followers_count = (TextView) convertView.findViewById(R.id.item_tweet_followers_count);
			holder.created_at = (TextView) convertView.findViewById(R.id.item_created_at);
			holder.verified = (ImageView) convertView.findViewById(R.id.item_vipImage);
			holder.retweeted_status_text = (TextView) convertView.findViewById(R.id.item_retweeted_status_text);
			holder.retweeted_status_microBlogImage = (ImageView) convertView.findViewById(R.id.item_retweeted_status_microBlogImage);
			holder.retweeted_status_ll = (LinearLayout) convertView.findViewById(R.id.item_retweeted_status_ll);
			convertView.setTag(holder);
		} else {
			holder = (ViewHolder) convertView.getTag();
		}

		holder.name.setText(name);
		holder.text.setText(text);
		// microBlogImage = mStatus.getThumbnailPic();
		if (!microBlogImage.equals("")) {
			//setQViewImage(holder.microBlogImage, microBlogImage);
			bmpManager.loadBitmap(microBlogImage, holder.microBlogImage, BitmapFactory.decodeResource(context.getResources(), R.drawable.icon));
			holder.microBlogImage.setOnClickListener(imageClickListener);
			holder.microBlogImage.setTag(mStatus.getOriginalPic());
			holder.microBlogImage.setVisibility(ImageView.VISIBLE);
		} else {
			holder.microBlogImage.setVisibility(View.GONE);
		}
		holder.source.setText(source);
		if (!profile_image_url.equals("")) //bmpManager.loadBitmap(profile_image_url, holder.profile_image);
			setViewImage(holder.profile_image, profile_image_url);
		holder.statuses_count.setText(statuses_count + "");
		holder.followers_count.setText(followers_count + "");
		holder.created_at.setVisibility(View.VISIBLE);
		if (!created_at.equals("") && created_at != null) holder.created_at.setText(created_at);
		else holder.created_at.setVisibility(View.INVISIBLE);
		if (verified) holder.verified.setVisibility(View.VISIBLE);
		else holder.verified.setVisibility(View.INVISIBLE);

		// ------------------------转发微博----------------------------------

		String retweeted_status_text = "";
		if (retweetedStatus != null) {
			retweeted_status_text = retweetedStatus.getText();
			Log.v(TAG, "retweeted_status_text:  " + retweeted_status_text);
		} else {
			// do nothing
		}

		if (!retweeted_status_text.equals("")) {
			holder.retweeted_status_text.setVisibility(View.VISIBLE);
			holder.retweeted_status_text.setText(retweeted_status_text);
		} else {
			holder.retweeted_status_text.setVisibility(View.GONE);
		}
		String retweeted_status_microBlogImage = "";
		if (retweetedStatus != null) {

			retweeted_status_microBlogImage = retweetedStatus.getThumbnailPic();
			Log.v(TAG, "retweeted_status_microBlogImage:  "+ retweeted_status_microBlogImage);
		} else {
			// do nothing
		}
		if (!retweeted_status_microBlogImage.equals("")) {
			holder.retweeted_status_microBlogImage.setVisibility(View.VISIBLE);
			setQViewImage(holder.retweeted_status_microBlogImage, retweeted_status_microBlogImage);
		} else {
			holder.retweeted_status_microBlogImage.setVisibility(View.GONE);
		}
		if (retweeted_status_text.equals("") && retweeted_status_microBlogImage.equals(""))
			holder.retweeted_status_ll.setVisibility(View.GONE);
		else
			holder.retweeted_status_ll.setVisibility(View.VISIBLE);

		return convertView;
	}

	public void setQViewImage(final ImageView v, String url) {
		imageLoader.loadDrawable(url, v, new ImageCallback() {
			@Override
			public void imageLoaded(Drawable imageDrawable, ImageView imageView, String imageUrl) {
				v.setImageDrawable(imageDrawable);
			}
		});
	}

	public void setViewImage(final ImageView v, String url) {
		Log.v(TAG,
				"------------------setViewImage(final ImageView v, String url)--------------------");
		Drawable cachedImage = mImageLoader.loadDrawable(url,
				new AsyncImageLoader.ImageCallback() {
					@Override
					public void imageLoaded(Drawable imageDrawable,
							String imageUrl) {
						v.setImageDrawable(imageDrawable);
						if (imageDrawable != null
								&& imageDrawable.getIntrinsicWidth() > 0) {
							v.setImageDrawable(imageDrawable);
						}
					}
				});
		v.setImageDrawable(cachedImage);
	}
	
	static class ViewHolder {
		ImageView profile_image;
		TextView name;
		TextView text;
		ImageView microBlogImage;
		TextView source;
		ImageView verified;
		TextView statuses_count;
		TextView followers_count;
		TextView created_at;
		TextView retweeted_status_text;
		ImageView retweeted_status_microBlogImage;
		LinearLayout retweeted_status_ll;
	}

	private View.OnClickListener faceClickListener = new View.OnClickListener(){
		public void onClick(View v) {
			Status mStatus = (Status)v.getTag();
			//UIHelper.showUserCenter(v.getContext(), mStatus.getAuthorId(), mStatus.getAuthor());
		}
	};
	
	private View.OnClickListener imageClickListener = new View.OnClickListener(){
		public void onClick(View v) {
			UIHelper.showImageDialog(v.getContext(), (String)v.getTag());
		}
	};
}
