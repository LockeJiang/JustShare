/**   
 * Copyright (c) 2013 by Logan.	
 *   
 * 爱分享-微博客户端，是一款运行在android手机上的开源应用，代码和文档已托管在GitHub上，欢迎爱好者加入
 * 1.授权认证：Oauth2.0认证流程
 * 2.服务器访问操作流程
 * 3.新浪微博SDK和腾讯微博SDK
 * 4.HMAC加密算法
 * 5.SQLite数据库相关操作
 * 6.字符串处理，表情识别
 * 7.JSON解析，XML解析：超链接解析，时间解析等
 * 8.Android UI：样式文件，布局
 * 9.异步加载图片，异步处理数据，多线程  
 * 10.第三方开源框架和插件
 *    
 */
package com.logan.weibo.ui;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Date;
import java.util.List;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.logan.R;
import com.logan.util.UIHelper;
import com.logan.weibo.adapter.ListViewAdapter;
import com.logan.weibo.bean.BaseTimeLine;
import com.logan.weibo.bean.Status;
import com.logan.weibo.widget.NewDataToast;
import com.logan.weibo.widget.PullToRefreshListView;
import com.weibo.net.WeiboException;

/**
 * 新浪微博，好友时间线
 * @author Logan <a href="https://github.com/Logan676/JustSharePro"/>
 *   
 * @version 1.0 
 *  
 */
public class FriendTimeLine extends BaseTimeLine {

	private final String TAG = "FriendTimeLine";

	//private AppContext appContext;//全局Context
	private ListViewAdapter mAdapter = null;
	private List<Status> statusList = null;
	private String mData = "";
	private int pageSize = 10;
	private int pageSum = 0;
	private Handler listViewHandler;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setSelectedFooterTab(0);
		titleTV.setText("微博主页");
		try {
			mData = getFriendTimeline("1", String.valueOf(pageSize));
		} catch (MalformedURLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (WeiboException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		statusList = getStatusList(mData);
		mAdapter = new ListViewAdapter(FriendTimeLine.this, statusList);
		pullToRefreshListView.setAdapter(mAdapter);
		
		pullToRefreshListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
        	@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        		//点击头部、底部栏无效
        		if(position == 0 || view == listView_footer) return;
        		Status status = null;
				// 判断是否是TextView
				if (view instanceof TextView) {
					status = (Status) view.getTag();
				} else {
					TextView tv = (TextView) view.findViewById(R.id.item_text);
					status = (Status) tv.getTag();
				}
				if (status == null) return;
        		
        		//跳转到微博详情
        		//UIHelper.showNewsRedirect(view.getContext(), news);
        		Intent intent = new Intent();
	    		Bundle mBundle = new Bundle(); 
	    		//Log.v(TAG, "position: "+(position-1));
	            mBundle.putSerializable("detail",statusList.get(position));  
	    		intent.putExtras(mBundle);
				intent.setClass(FriendTimeLine.this, StatusDetail.class);
				startActivity(intent);
        	}        	
		});
        pullToRefreshListView.setOnScrollListener(new AbsListView.OnScrollListener() {
			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {
				pullToRefreshListView.onScrollStateChanged(view, scrollState);
				
				//数据为空--不用继续下面代码了
				if(statusList.isEmpty()) return;
				
				//判断是否滚动到底部
				boolean scrollEnd = false;
				try {
					if(view.getPositionForView(listView_footer) == view.getLastVisiblePosition())
						scrollEnd = true;
				} catch (Exception e) {
					scrollEnd = false;
				}
				
				//int lvDataState = StringUtils.toInt(pullToRefreshListView.getTag());
				if(scrollEnd )//&& lvDataState==UIHelper.LISTVIEW_DATA_MORE
				{
					pullToRefreshListView.setTag(UIHelper.LISTVIEW_DATA_LOADING);
					listView_foot_more.setText(R.string.load_ing);
					listView_foot_progress.setVisibility(View.VISIBLE);
					//返回ID比since_id大的微博，实现翻页效果
					//String since_id =statusList.get(statusList.size()-1).getId();
					//Log.v(TAG, "pageIndex  is: "+since_id);
					//页码
					int pageIndex = pageSum/pageSize;
					Log.v(TAG, "pageIndex  is: "+pageIndex);
					loadLvData(String.valueOf(pageIndex), listViewHandler, UIHelper.LISTVIEW_ACTION_SCROLL);
				}
			}
			@Override
			public void onScroll(AbsListView view, int firstVisibleItem,int visibleItemCount, int totalItemCount) {
				pullToRefreshListView.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);
			}
		});
        pullToRefreshListView.setOnRefreshListener(new PullToRefreshListView.OnRefreshListener() {
            @Override
			public void onRefresh() {
            	loadLvData("1", listViewHandler, UIHelper.LISTVIEW_ACTION_REFRESH);
            }
        });	
        listViewHandler = this.getLvHandler(pullToRefreshListView, mAdapter, listView_foot_more, listView_foot_progress, pageSize);
        
	}
	/**
     * 获取listview的初始化Handler
     * @param lv
     * @param adapter
     * @return
     */
    @SuppressLint("HandlerLeak")
	private Handler getLvHandler(final PullToRefreshListView lv,final BaseAdapter adapter,final TextView more,final ProgressBar progress,final int pageSize){
    	return new Handler(){
			@Override
			public void handleMessage(Message msg) {
				if(msg.what >= 0){
					//listview数据处理
					//Notice notice = 
					handleLvData(msg.what, msg.obj, msg.arg2, msg.arg1);
					
					if(msg.what < pageSize){
						lv.setTag(UIHelper.LISTVIEW_DATA_FULL);
						adapter.notifyDataSetChanged();
						more.setText(R.string.load_full);//已经加载完毕
					}else if(msg.what == pageSize){
						lv.setTag(UIHelper.LISTVIEW_DATA_MORE);
						adapter.notifyDataSetChanged();
						more.setText(R.string.load_more);
						
					}
				}
				else if(msg.what == -1){
					//有异常--显示加载出错 & 弹出错误消息
					lv.setTag(UIHelper.LISTVIEW_DATA_MORE);
					more.setText(R.string.load_error);
					//((AppException)msg.obj).makeToast(Main.this);
				}
				if(adapter.getCount()==0){
					lv.setTag(UIHelper.LISTVIEW_DATA_EMPTY);
					more.setText(R.string.load_empty);
				}
				progress.setVisibility(View.GONE);
				mHeadProgress.setVisibility(View.GONE);
				if(msg.arg1 == UIHelper.LISTVIEW_ACTION_REFRESH){
					lv.onRefreshComplete(getString(R.string.pull_to_refresh_update) + new Date().toLocaleString());
					lv.setSelection(0);
				}
				else if(msg.arg1 == UIHelper.LISTVIEW_ACTION_SCROLL){
					lv.onRefreshComplete();
					//lv.setSelection(0);
				}
			}
		};
    }
    /**
     * 为ListView加载数据
     * @param pageIndex 页码，默认为1
     * @param handler 处理器
     * @param action 动作指令
     */
	private void loadLvData(final String pageIndex,final Handler handler,final int action){ 
		mHeadProgress.setVisibility(View.VISIBLE);		
		new Thread(){
			@Override
			public void run() {				
				Message msg = new Message();
				//boolean isRefresh = false;
					if(action == UIHelper.LISTVIEW_ACTION_REFRESH || action == UIHelper.LISTVIEW_ACTION_SCROLL){
						//isRefresh = true;
						Log.v(TAG, "try to load data...");
					try {					
						//NewsList list = appContext.getNewsList(pageIndex, isRefresh);
						//mData = getFriendTimeline(since_id);
						mData = getFriendTimeline(pageIndex, String.valueOf(pageSize));
						List<Status> newData  = getStatusList(mData);
						msg.what = newData.size();
						msg.obj = newData;
		            } catch (Exception e) {
		            	Log.v(TAG,"load data exception");
		            	e.printStackTrace();
		            	msg.what = -1;
		            	msg.obj = e;
		            }
					msg.arg1 = action;
					msg.arg2 = UIHelper.LISTVIEW_DATATYPE_NEWS;
					handler.sendMessage(msg);
				} 
			}
		}.start();
	} 
	
	 /**
     * listview数据处理
     * @param what 数量
     * @param obj 数据
     * @param objtype 数据类型
     * @param actiontype 操作类型
     * @return notice 通知信息
     */
    private void handleLvData(int what,Object obj,int objtype,int actiontype){
    	//Notice notice = null;
		switch (actiontype) {
			case UIHelper.LISTVIEW_ACTION_INIT:
			case UIHelper.LISTVIEW_ACTION_REFRESH:
			case UIHelper.LISTVIEW_ACTION_CHANGE_CATALOG:
				int newdata = 0;//新加载数据-只有刷新动作才会使用到
				switch (objtype) {
					case UIHelper.LISTVIEW_DATATYPE_NEWS:
						@SuppressWarnings("unchecked")
						List<Status> newList = (List<Status>) obj;
						//notice = nlist.getNotice();
						pageSum = what;
						Log.v(TAG, "handler starts to handle, Sir");
						if(actiontype == UIHelper.LISTVIEW_ACTION_REFRESH){
							if(statusList.size() > 0){
								for(Status status : newList){
									boolean b = false;
									for(Status status2 : statusList){
										if (status.getId().equals(status2.getId())) {
											b = true;
											break;
										}
									}
									if (!b) newdata++;
								}
							}else{
								
								newdata = what;
							}
						}
						statusList.clear();//先清除原有数据
						statusList.addAll(newList);
						break;
					
				}
				if(actiontype == UIHelper.LISTVIEW_ACTION_REFRESH){
					//提示新加载数据
					if(newdata >0){
						//NewDataToast.makeText(this, getString(R.string.new_data_toast_message, newdata), mApplication.isAppSound()).show();
						NewDataToast.makeText(this, getString(R.string.new_data_toast_message, newdata), true).show();
					}else{
						NewDataToast.makeText(this, getString(R.string.new_data_toast_none), false).show();
					}
				}
				break;
			case UIHelper.LISTVIEW_ACTION_SCROLL:
				switch (objtype) {
					case UIHelper.LISTVIEW_DATATYPE_NEWS:
						@SuppressWarnings("unchecked")
						List<Status> newList = (List<Status>) obj;
						pageSum += what;
						if(statusList.size() > 0){
							for(Status status : newList){
								boolean b = false;
								for(Status status2 : statusList){
									if(status.getId().equals(status2.getId())){
										b = true;
										break;
									}
								}
								if(!b) statusList.add(status);
							}
						}else{
							statusList.addAll(newList);
						}
						break;
				}
				break;
		}
		//return notice;
    }
    
}
