package com.logan.weibo.adapter;

import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.logan.R;
import com.logan.util.QAsyncImageLoader;
import com.logan.util.QAsyncImageLoader.ImageCallback;
import com.logan.util.TimeUtil;

/**
 * QFriendTimeLine的适配器
 * 
 * @author Logan
 * 
 */
public class QListViewAdapter extends BaseAdapter {
	static class ViewHolder {
		ImageView head;// 头像
		TextView nick;// 用户名
		TextView origText;// 微博文本
		ImageView image;// 微博图片
		TextView from;// 平台来源
		ImageView isVip;
		TextView mcount;
		TextView count;
		TextView timeStamp;
		// --------转发微博-----------------
		TextView source_text;// 转发微博文字
		ImageView source_image;// 转发微博图片
		View source_ll;// 转发微博父容器
	}

	private final String TAG = "QSearchAdapter";

	private QAsyncImageLoader imageLoader = new QAsyncImageLoader();
	private LayoutInflater mInflater;

	private List<JSONObject> list;

	ViewHolder holder;

	public QListViewAdapter(Context context, List<JSONObject> list) {
		super();
		this.list = list;
		this.mInflater = LayoutInflater.from(context);
	}

	@Override
	public int getCount() {
		// TODO Auto-generated method stub
		return this.list != null ? this.list.size() : 0;
	}

	@Override
	public Object getItem(int position) {
		// TODO Auto-generated method stub
		return list.get(position);
	}

	@Override
	public long getItemId(int position) {
		// TODO Auto-generated method stub
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		Boolean isVisible = true;
		JSONObject js = list.get(position);
		String head = "";
		String nick = "";
		String origText = "";
		// String text = "";// 适用于转发微博
		String image = "";// 微博图片
		String from = "";
		int isVip = 0;
		String mcount = "";
		String count = "";
		String created_at = "";
		// --转发微博---
		JSONObject source = null;
		// String source_nick = "";
		String source_text = "";// 微博文字信息，包含URL、昵称、是否认证的信息
		String source_image = "";
		try {
			head = js.getString("head") + "/100";
			Log.v(TAG, "head:  " + head);
			nick = js.getString("nick");
			Log.v(TAG, "nick: " + nick);
			origText = js.getString("origtext");
			Log.v(TAG, "origText:  " + origText);
			// text = js.getString("text");
			// Log.v(TAG, "text: " + text);
			JSONArray imageArray = js.optJSONArray("image");// 如果此微博有图片内容，就显示出来
			if (imageArray != null && imageArray.length() > 0) {
				// /120 /160 /460 /2000返回相应大小的图片
				image = imageArray.optString(0) + "/160";
			}
			Log.v(TAG, "image:  " + image);
			from = js.getString("from");// 不是超链接的数据，纯文本
			Log.v(TAG, "from:  " + from);
			isVip = js.getInt("isvip");
			Log.v(TAG, "isVip:  " + isVip);
			mcount = js.getString("mcount");
			Log.v(TAG, "mcount:  " + mcount);
			count = js.getString("count");
			Log.v(TAG, "count:  " + count);
			created_at = TimeUtil.converTime(Long.parseLong(js
					.getString("timestamp")));

			// --------------获取转发微博的信息----包括图片、文字信息，不包含视频、音频信息------------------------
			if (!js.isNull("source")) {
				source = js.getJSONObject("source");
				Log.v(TAG, "sourcel:  " + source);

				if (!source.isNull("image")) {
					JSONArray images = source.getJSONArray("image");
					if (images != null && images.length() > 0) {
						source_image = images.optString(0) + "/120";
						Log.v(TAG, "source_image_url:  " + source_image);
					}
				}
				if (!source.isNull("nick")) {
					String source_nick = source.getString("nick");
					Log.v(TAG, "source_nick:  " + source_nick);

					if (!source.isNull("origtext")) {
						source_text = source_nick + ":  "
								+ source.getString("origtext");
						Log.v(TAG, "source_origtext:  " + source_text);
					}
				}
			} else
				isVisible = false;

			// String home_source_text = null;
			// boolean isvip = source.getInt("isvip") == 1 ? true : false;
			// if (isvip) {
			// home_source_text = "@" + source.getString("nick") + "======:"
			// + source.getString("origtext");// 用6个连续的=号来替换vip标志图标
			// } else {
			// home_source_text = "@" + source.getString("nick") + ":"
			// + source.getString("origtext");
			// }
			// source_text = new SpannableString(home_source_text);
			//
			// source_text = TextUtil.decorateRefersInStr(
			// source_text,
			// RegexUtil.getStartAndEndIndex(home_source_text,
			// Pattern.compile("@.*:")), null);
			// source_text = TextUtil.decorateTopicInStr(
			// source_text,
			// RegexUtil.getStartAndEndIndex(home_source_text,
			// Pattern.compile("#.*#")), null);
			// source_text = TextUtil
			// .decorateTopicInStr(
			// source_text,
			// RegexUtil
			// .getStartAndEndIndex(
			// home_source_text,
			// Pattern.compile("^http://\\w+(\\.\\w+|)+(/\\w+)*(/\\w+\\.(\\w+|))?")),
			// null);
			//
			// if (isvip) {
			// source_text = TextUtil.decorateVipInStr(
			// source_text,
			// RegexUtil.getStartAndEndIndex(home_source_text,
			// Pattern.compile("======")), null);// 替换为vip认证图片
			// }

		} catch (JSONException e) {
			e.printStackTrace();
		}

		if (convertView == null) {
			holder = new ViewHolder();
			convertView = mInflater.inflate(R.layout.weibo_listview_item, null);
			holder.nick = (TextView) convertView
					.findViewById(R.id.item_screen_name);
			holder.head = (ImageView) convertView
					.findViewById(R.id.item_profile_image);

			holder.origText = (TextView) convertView
					.findViewById(R.id.item_text);
			holder.image = (ImageView) convertView
					.findViewById(R.id.item_microBlogImage);
			holder.from = (TextView) convertView.findViewById(R.id.item_from);

			holder.mcount = (TextView) convertView
					.findViewById(R.id.item_tweet_statuses_count);
			holder.count = (TextView) convertView
					.findViewById(R.id.item_tweet_followers_count);
			holder.timeStamp = (TextView) convertView
					.findViewById(R.id.item_created_at);
			holder.isVip = (ImageView) convertView
					.findViewById(R.id.item_vipImage);

			// ---------------转发微博---------------------
			holder.source_text = (TextView) convertView
					.findViewById(R.id.item_retweeted_status_text);
			holder.source_image = (ImageView) convertView
					.findViewById(R.id.item_retweeted_status_microBlogImage);
			holder.source_ll = convertView
					.findViewById(R.id.item_retweeted_status_ll);

			convertView.setTag(holder);
		} else {
			holder = (ViewHolder) convertView.getTag();
		}

		holder.nick.setText(nick);
		// if (!origText.equals("") && origText != null)
		holder.origText.setText(origText);
		// else
		// holder.origText.setText(text);
		if (!image.equals("")) {
			holder.image.setVisibility(View.VISIBLE);
			setViewImage(holder.image, image);
		} else {
			holder.image.setVisibility(View.GONE);
		}
		holder.from.setText(from);

		Drawable cachedImage = null;
		if (!head.equals("") && head != null) {
			cachedImage = imageLoader.loadDrawable(head, holder.head,
					new ImageCallback() {
						@Override
						public void imageLoaded(Drawable imageDrawable,
								ImageView imageView, String imageUrl) {
							imageView.setImageDrawable(imageDrawable);
						}
					});
		}
		if (cachedImage == null) {
			holder.head.setImageResource(R.drawable.icon);
		} else {
			holder.head.setImageDrawable(cachedImage);
		}

		holder.mcount.setText(mcount);
		holder.count.setText(count);
		holder.timeStamp.setVisibility(View.VISIBLE);
		if (!created_at.equals(""))
			holder.timeStamp.setText(created_at);
		else
			holder.timeStamp.setVisibility(View.INVISIBLE);
		if (isVip == 1)
			holder.isVip.setVisibility(View.VISIBLE);
		else
			holder.isVip.setVisibility(View.INVISIBLE);

		// ------------------------转发微博----------------------------------

		if (!source_image.equals("") && source_image != null) {
			holder.source_image.setVisibility(View.VISIBLE);
			setViewImage(holder.source_image, source_image);
		} else
			holder.source_image.setVisibility(View.GONE);
		if (!source_text.equals("")) {
			holder.source_text.setVisibility(View.VISIBLE);
			holder.source_text.setText(source_text);
		} else
			holder.source_text.setVisibility(View.GONE);

		if (!isVisible)
			holder.source_ll.setVisibility(View.GONE);
		else
			holder.source_ll.setVisibility(View.VISIBLE);

		return convertView;
	}

	public void setViewImage(final ImageView v, String url) {
		// Bitmap bitmap = WebImageBuilder.returnBitMap(url);
		// v.setImageBitmap(bitmap);
		imageLoader.loadDrawable(url, v, new ImageCallback() {
			@Override
			public void imageLoaded(Drawable imageDrawable,
					ImageView imageView, String imageUrl) {
				v.setImageDrawable(imageDrawable);
			}
		});
	}

}
